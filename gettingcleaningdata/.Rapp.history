install.packages("KernSmooth")
library(KernSmooth)
makeCacheMatrix <- function(x = matrix()) {#
	inv <- NULL # here the result is stored#
	set <- function(y){#
		x <<- y#
		inv <<- NULL # initialises inv to null#
		}#
		get <- function() x # return the input matrix#
		setinverse <- function(inverse) inv <<- inverse#
		getinverse <- function() inv#
		list(set=set, get=get, setinverse=setinverse, getinverse=getinverse) # returns a list that contains all these functions, so that we can then change matrix, go to changed matrix, set inversed matrix and get inversed matrix#
#
}#
## The second function returns the inverse of the matrix. It first checks if the inverse has already been calculated and skips computation if so. If not, it computes the inverse and sets the value in the cache with setinverse.#
#
cacheSolve <- function(x, ...) {#
        inv <- x$getinverse() # get the inversed matrix from object x#
        if(!is.null(inv)) {#
        	message("getting cached data")#
        	return(inv) # return the calculated inversion#
        	}#
        	data <- x$get() # if not, we get the matrix object#
        	inv <- solve(data) # then solve it#
        	x$setinverse(inv) # then set it to the object#
        	inv # and return the solved result#
}
m <- matrix(c(-1, -2, 1, 1), 2, 2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 1, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- x[1:20]
my_vector <- c[1:20]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
download.file(fileUrl, destfile = "./ss06hid.csv", method = "curl")
housingData <- read.csv("./ss06hid.csv")
head(housingData)
summary(housingData)
agricultureLogical <- housingData$ACR == 3 & housingData$AGS == 6
which(agricultureLogical)[1:3]
install.packages("jpeg")
library(jpeg)
?jpeg
img <- readJPEG("./jeff.jpeg", native=TRUE)
img <- readJPEG("./jeff.jpg", native=TRUE)
?quantile
quantile(img, probs = seq(0.3, 0.8))
quantile(img, probs = c(0.3, 0.8))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "./GDP.csv", method = "curl")
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, destfile = "./FEDSTATS.csv", method = "curl")
gdpData <- read.csv("./GDP.csv")
statsData <- read.csv("./FEDSTATS.csv")
head(gdpData)
head(statsData)
str(gdpData)
gdpData <- read.csv("./GDP.csv", skip = 4)
head(gdpData)
tail(gdpData)
summary(gdpData$X)
tail(gdpData$X)
head(gdpData$X)
str(statsData)
rename(gdpData, CountryCode=X)
install.packages("dplyr")
library(dplyr)
rename(gdpData, CountryCode=X)
newData <- merge(gdpData, statsData, by.x="CountryCode", by.y="CountryCode", all=TRUE)
?merge
newData <- merge(gdpData, statsData, by = c("CountryCode"), all=TRUE)
summary(gdpData$CountryCode)
summary(gdpData)
?setnames
?names
str(gdpData)
gdpData <- gdpData[, list(X, X.1, X.3, X.4)]
gdpData <- gdpData[X != ""]
head(gdpData)
merge(gdpData, statsData, by.x="X", by.y="CountryCode", all=TRUE)
newData <- merge(gdpData, statsData, by.x="X", by.y="CountryCode", all=TRUE)
head(newData)
str(newData)
sum(!is.na(unique(newData$X.1)))
sum(!is.na(newData$X.1))
arrange(newData, X.1)[13]
arrange(newData, desc(X.1))[13]
list(X, X.1) [13]
head(newData, n=13)
newData[, mean(X.1, na.rm = TRUE), by = Income.Group]
